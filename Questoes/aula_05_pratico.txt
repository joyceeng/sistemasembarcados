Data: 23/03/2017

Para todas as questões, utilize as funções da norma POSIX (open(), close(), write(), read() e lseek()). Compile os códigos com o gcc e execute-os via terminal.

1. Crie um código em C para escrever "Ola mundo!" em um arquivo chamado 'ola_mundo.txt'.
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

	int main(int argc, const char * argv[]){
		write(open ("ola_mundo.txt", O_WRONLY | O_CREAT, S_IRWXU), "Ola mundo!\n", 11);
		return 0;
}

$ gcc questao_01.c -o questao_01
$ cat ola_mundo.txt

2. Crie um código em C que pergunta ao usuário seu nome e sua idade, e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando 

que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Digite a sua idade: 30
	$ cat Eu.txt
	$ Nome: Eu
	$ Idade: 30 anos
	$

#include <stdio.h> /* para funcao printf*/
#include <fcntl.h> /* para funcao open()*/
#include <unistd.h> /* para funcao close()*/
#include <stdlib.h> /* para funcao exit()*/


int main(int argc, const char *argv[]){
	int fp; 
	int i ;
	char nome[50];
	char idade[50];

	printf("Digite o seu nome:");
	gets(nome);
	printf("Digite a sua idade:");
	gets(idade);
	
	//abre o arquivo. Se não colocar o S_IRWXU não tem acesso ao arquivo
	fp = open (nome, O_WRONLY | O_CREAT, S_IRWXU);
	if(fp==-1)
	{
		printf ("Erro na abertura do arquivo.\n");
		exit (1);
	}

	// Escreve caracterer por caracterer da string
	write(fp, "Nome: ", 6*sizeof(char)); 	
		for(i = 0 ; nome[i]; i++)
		{	
	 		write(fp, &(nome[i]), 1); 	
			
		}
	write(fp, "\r\n", 2);

	write(fp, "Idade: ", 7*sizeof(char)); 
		for(i = 0 ; idade[i]; i++)
		{
			write(fp, &(idade[i]), 1); 
			
		}
	write(fp, " anos", 5);
	write(fp, "\r\n", 2);
	close(fp);
	return 0;
}


3. Crie um código em C que recebe o nome do usuário e e sua idade como argumentos de entrada (usando as variáveis argc e *argv[]), e escreve este conteúdo em um 

arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu 30
	$ cat Eu.txt
	$ Nome: Eu
	$ Idade: 30 anos
	$

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>

int main(int argc, const char * argv[]){
	int fp, i;
	char nome[50];
	char idade[50];


	fp = open (argv[1], O_WRONLY | O_CREAT, S_IRWXU);

	if(fp == -1){
		printf ("Erro na abertura do arquivo.\n");
		exit (1);
	}
	write(fp, "Nome: ", 6*sizeof(char)); // Grava a string, caractere a caractere	

	for(i=0; argv[1][i]; i++){	
		write(fp, &(argv[1][i]), 1);
	}	
		write(fp, "\r\n", 2); // dois bytes, um para \r e outro \n
	
	write(fp, "Idade: ", 7*sizeof(char));
	
	for(i=0; argv[2][i]; i++){	
		write(fp, &(argv[2][i]), 1);
	}
	write(fp, " anos", 5);
	close(fp);
	return 0;
}

4. Crie uma função que retorna o tamanho de um arquivo, usando o seguinte protótipo:

	int tam_arq_texto(char *nome_arquivo);

Salve esta função em um arquivo separado chamado 'bib_arqs.c'. Salve o protótipo em um arquivo chamado 'bib_arqs.h'. Compile 'bib_arqs.c' para gerar o objeto 

'bib_arqs.o'.

tam_arq_texto:

#include <stdio.h>
#include <fcntl.h> /* para funcao open()*/
#include <unistd.h> /* para funcao close()*/
#include <stdlib.h> /* para funcao exit()*/
#include "bib_arcs.h"



int tam_arq_texto(char *string) /*declara nome da função e pega string da main*/{
	int i = 0;
	int fp;
	int c;

	fp = open (string, O_WRONLY | O_CREAT, S_IRWXU);
		while(read (fp, &c, sizeof(c) != 0)) /*enquanto não encontra o fim do arquivo, a variável i vai somando os caracteres*/
			i++;
		return i;
close(fp);
}

Para compilar:
$ gcc -c bib_arqcs.c

5. Crie uma função que lê o conteúdo de um arquivo-texto e o guarda em uma string, usando o seguinte protótipo:

	void le_arq_texto(char *nome_arquivo, char *conteúdo);

Repare que o conteúdo do arquivo é armazenado no vetor 'conteudo[]'. Ou seja, ele é passado por referência. Salve esta função no mesmo arquivo da questão 4, chamado 

'bib_arqs.c'. Salve o protótipo no arquivo 'bib_arqs.h'. Compile 'bib_arqs.c' novamente para gerar o objeto 'bib_arqs.o'.

#include <stdio.h>
#include <fcntl.h> /* para funcao open()*/
#include <unistd.h> /* para funcao close()*/
#include <stdlib.h> /* para funcao exit()*/
#include "bib_arcs.h"


int tam_arq_texto(char *string[]) /*declara nome da função e pega string da main*/{

	int fp;
	int i = 0;
	char c;

	fp = open (string, O_WRONLY | O_CREAT, S_IRWXU);
		while(read (fp, &c, sizeof(c) != 0){ /*enquanto não encontra o fim do arquivo, a variável i vai somando os caracteres*/
			i++;
		}
		return i;
close(fp);
}

void le_arq_texto(char *string, char *conteudo){

int i;
int fp;
char c;

fp = open (string, O_WRONLY | O_CREAT, S_IRWXU);

while (read(fp, &c, sizeof(c) != 0){
	conteudo[i] = c;
		i++;
}

close(fp);
return 0; 
}

#include <stdio.h> 
#include <stdlib.h> 
#include "bib_arqs.h"

int main(int argc, char *argv[]){
	
	char palavra[300];

	le_arq_texto(argv[1], palavra);
	printf("%s", palavra);

	return 0;
}

Para compilar: 
$ gcc -c le_arq_texto.c
$ gcc main_5.c -o main_5
$ ./main_5

6. Crie um código em C que copia a funcionalidade básica do comando 'cat': escrever o conteúdo de um arquivo-texto no terminal. Reaproveite as funções já criadas nas 

questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'cat_falsificado':
	$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
	$ ./cat_falsificado ola.txt
	$ Ola mundo cruel! Ola universo ingrato!
	$

7. Crie um código em C que conta a ocorrência de uma palavra-chave em um arquivo-texto, e escreve o resultado no terminal. Reaproveite as funções já criadas nas 

questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'busca_e_conta':
	$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
	$ ./busca_e_conta Ola ola.txt
	$ 'Ola' ocorre 2 vezes no arquivo 'ola.txt'.
	$

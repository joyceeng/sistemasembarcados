Data: 30/03/2017

1. Crie um programa em C que cria um processo-filho e um pipe de comunicação. Faça com que o processo-pai envie os valores 1, 2, 3, 4, 5, 6, 7, 8, 9 e 10 para o processo-filho, com intervalos de 1 segundo entre cada envio. Depois de o processo-pai enviar o número 10, ele aguarda 1 segundo e termina a execução. O processo-filho escreve na tela cada valor recebido, e quando ele receber o valor 10, ele termina a execução.

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <string.h>

int main()
{
	pid_t child_pid;
	int fd[2];
	int buffer_filho;
	int i;

	pipe(fd);
	child_pid = fork();

	if(child_pid == 0){
		printf("Filho vai ler o pipe\n");
		for (i = 0; i < 10; i++){
			if (read(fd[0], &buffer_filho, sizeof(int)) == 0){
				printf ("Valor lido pelo filho: %d\n", 

buffer_filho);
			}

		}
	}

	else{
	for (i = 0; i < 10; i++){
		buffer_pai = i++;
		printf("Pai vai escrever no pipe\n");
		if (write(fd[1], &buffer_pai, sizeof(buffer_pai)) == 0)
			printf("Pai terminou de escrever no pipe\n");
	}
		sleep(1);
	return 0;
}
[nao testado]
2. Crie um programa em C que cria um processo-filho e um pipe de comunicação. Utilize o pipe para executar a seguinte conversa entre processos:

	FILHO: Pai, qual é a verdadeira essência da sabedoria?
	PAI: Não façais nada violento, praticai somente aquilo que é justo e equilibrado.
	FILHO: Mas até uma criança de três anos sabe disso!
	PAI: Sim, mas é uma coisa difícil de ser praticada até mesmo por um velho como eu...

Neste exercício, quem recebe a mensagem via pipe é quem as escreve no terminal.

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <string.h>

int main()
{
	pid_t child_pid;
	pipe(fd);
	int fd[2];
	child_pid = fork();

	if(child_pid == 0){
		char buffer_filho[100];
		strcpy(buffer_filho, "Pai, qual e a verdadeira essência da sabedoria?");
		if(write(fd[1], buffer_filho, sizeof(buffer_filho)) == 0){
			printf ("Pai, qual e a verdadeira essencia da sabedoria?", buffer_filho); /*nao tenho certeza se a mensagem e printada sem o printf*/
sleep(1);

		if(read(fd[0], buffer_filho, 100) == 0)
			printf ("Pai = %s", buffer_filho);
		strcpy(buffer_filho,"Mas ate uma criança de tres anos sabe disso!");
		if(write(fd[1], buffer_filho, sizeof(buffer_filho)) == 0){
			printf ("Mas ate uma criança de tres anos sabe disso!", buffer_filho);
sleep(1);

		if(read(fd[0], buffer_filho, 100) == 0)
			printf ("Pai = %s", buffer_filho);
}

	else
		char buffer_pai[100];
		if(read(fd[0], buffer_pai, 100) == 0)
			printf ("Filho = %s", buffer_filho);
		strcpy(buffer_pai,"Não facais nada violento, praticai somente aquilo que e justo e equilibrado.");
		if (write(fd[1], buffer_pai, sizeof(buffer_pai)) == 0)
		printf ("Não facais nada violento, praticai somente aquilo que e justo e equilibrado.", buffer_pai);
		sleep(2);
		if(read(fd[0], buffer_pai, 100) == 0)
			printf ("Filho = %s", buffer_pai);
 		strcpy(buffer_pai,"Sim, mas e uma coisa dificil de ser praticada até mesmo por um velho como eu...");
		 if (write(fd[1], buffer_pai, sizeof(buffer_pai)) == 0)
		printf ("Sim, mas e uma coisa dificil de ser praticada até mesmo por um velho como eu...", buffer_pai);

	return 0;
}


3. Crie um programa em C que cria dois processos-filhos e um pipe de comunicação. Utilize o pipe para executar a seguinte conversa entre processos:

	FILHO1: Quando o vento passa, é a bandeira que se move.
	FILHO2: Não, é o vento que se move.
	PAI: Os dois se enganam. É a mente dos senhores que se move.

Neste exercício, quem recebe a mensagem via pipe é quem as escreve no terminal.

4. Crie um programa em C que cria um processo-filho e um pipe de comunicação. O processo-filho deverá pedir o nome do usuário, envia-lo para o pai via pipe, e o pai deverá escrever o nome do usuário no terminal.

5. Utilize o sinal de alarme para chamar a cada segundo o comando 'ps' ordenando todos os processos de acordo com o uso da CPU. Ou seja, seu código atualizará a lista de processos a cada segundo. Além disso, o código deverá tratar o sinal do CTRL-C, escrevendo "Processo terminado!" na tela antes de terminar a execução do processo.
